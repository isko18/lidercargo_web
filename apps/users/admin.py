# admin.py
from django.contrib import admin
from django import forms
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from django.contrib.auth.forms import ReadOnlyPasswordHashField
from django.db.models import Count

from .models import User, PickupPoint, WarehouseCN, ClientCodeCounter, Order, TrackingEvent


# ---------- Forms –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã UserAdmin ----------

class UserCreationForm(forms.ModelForm):
    password1 = forms.CharField(label="–ü–∞—Ä–æ–ª—å", widget=forms.PasswordInput)
    password2 = forms.CharField(label="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è", widget=forms.PasswordInput)

    class Meta:
        model = User
        fields = ("phone", "full_name", "pickup_point", "email")

    def clean_password2(self):
        p1 = self.cleaned_data.get("password1")
        p2 = self.cleaned_data.get("password2")
        if p1 and p2 and p1 != p2:
            raise forms.ValidationError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")
        return p2

    def save(self, commit=True):
        user = super().save(commit=False)
        user.set_password(self.cleaned_data["password1"])
        if commit:
            user.save()
            # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–¥ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É
            if not user.client_code:
                user.assign_client_code()
        return user


class UserChangeForm(forms.ModelForm):
    password = ReadOnlyPasswordHashField(
        help_text="–ü–∞—Ä–æ–ª–∏ –Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ."
    )

    class Meta:
        model = User
        fields = (
            "phone",
            "full_name",
            "email",
            "pickup_point",
            "lc_number",      # üîπ —Ä—É—á–Ω–æ–µ –ø–æ–ª–µ
            "region_code",    # üîπ —Ä—É—á–Ω–æ–µ –ø–æ–ª–µ
            "password",
            "is_active",
            "is_blocked",
            "is_staff",
            "is_superuser",
            "groups",
            "user_permissions",
        )

# ---------- Admin –¥–ª—è User ----------

@admin.action(description="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∫–æ–¥—ã (—Ç–æ–ª—å–∫–æ —É –∫–æ–≥–æ –ø—É—Å—Ç–æ)")
def generate_missing_codes(modeladmin, request, queryset):
    created = 0
    for u in queryset:
        if not u.client_code:
            u.assign_client_code()
            created += 1
    modeladmin.message_user(request, f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–¥–æ–≤: {created}")

@admin.action(description="–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∫–æ–¥—ã (–û–°–¢–û–†–û–ñ–ù–û: –∏–∑–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–µ –∫–æ–¥—ã)")
def regenerate_codes(modeladmin, request, queryset):
    for u in queryset:
        # assign_client_code: –µ—Å–ª–∏ lc_number —É–∂–µ –µ—Å—Ç—å ‚Äî —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–æ–±–µ—Ä—ë—Ç client_code —Å –Ω–æ–≤—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –ü–í–ó
        u.assign_client_code()
    modeladmin.message_user(request, f"–ö–æ–¥—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –¥–ª—è {queryset.count()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

@admin.action(description="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def block_users(modeladmin, request, queryset):
    updated = queryset.update(is_blocked=True)
    modeladmin.message_user(request, f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {updated}")

@admin.action(description="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def unblock_users(modeladmin, request, queryset):
    updated = queryset.update(is_blocked=False)
    modeladmin.message_user(request, f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {updated}")


@admin.register(User)
class UserAdmin(BaseUserAdmin):
    add_form = UserCreationForm
    form = UserChangeForm
    model = User

    list_display = (
        "id",
        "full_name",
        "phone",
        "pickup_point",
        "client_code",
        "client_code_display_admin",
        "is_active",
        "is_blocked",
        "is_staff",
        "date_joined",
    )
    list_display_links = ("id", "full_name", "phone")
    list_filter = ("pickup_point", "is_blocked", "is_active", "is_staff", "is_superuser", "date_joined")
    search_fields = ("full_name", "phone", "email", "client_code")
    ordering = ("-id",)

    readonly_fields = ("client_code", "date_joined", "updated_at",
                       "client_code_display_admin", "cn_warehouse_address_admin")

    fieldsets = (
        ("–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", {"fields": ("phone", "password")}),
        ("–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", {"fields": ("full_name", "email", "pickup_point")}),
        ("–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–¥", {
            "fields": (
                "lc_number", "region_code", "client_code",
                "client_code_display_admin", "rack", "cell",
                "cn_warehouse_address_admin"
            )
        }),
        ("–ü—Ä–∞–≤–∞ –∏ —Å—Ç–∞—Ç—É—Å—ã", {"fields": ("is_active", "is_blocked", "is_staff", "is_superuser", "groups", "user_permissions")}),
        ("–°–ª—É–∂–µ–±–Ω—ã–µ", {"fields": ("last_login", "date_joined", "updated_at")}),
    )
    autocomplete_fields = ("pickup_point",)

    add_fieldsets = (
        ("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", {
            "classes": ("wide",),
            "fields": ("phone", "full_name", "pickup_point", "email", "password1", "password2"),
        }),
    )

    actions = [generate_missing_codes, regenerate_codes, block_users, unblock_users]

    # —É–¥–æ–±–Ω—ã–µ ¬´–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ¬ª –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    @admin.display(description="–ö–æ–¥ (—Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º)")
    def client_code_display_admin(self, obj: User):
        return obj.client_code_display

    @admin.display(description="–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ")
    def cn_warehouse_address_admin(self, obj: User):
        return obj.cn_warehouse_address


# ---------- Admin –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ ----------

@admin.register(WarehouseCN)
class WarehouseCNAdmin(admin.ModelAdmin):
    list_display = ("id", "name", "address_cn", "contact_name", "contact_phone", "is_active", "updated_at")
    list_filter = ("is_active",)
    search_fields = ("name", "address_cn", "contact_name", "contact_phone")
    ordering = ("name",)

class UserInline(admin.TabularInline):
    model = User
    fields = ("full_name", "phone", "lc_number", "region_code", "client_code")
    extra = 0
    readonly_fields = ("client_code",)


@admin.register(PickupPoint)
class PickupPointAdmin(admin.ModelAdmin):
    list_display = (
        "id",
        "name_ru",
        "code_label",
        "region_code",
        "branch_code",
        "lc_prefix",                # üîπ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å LC
        "default_cn_warehouse",
        "is_active",
        "users_count",
        "updated_at",
    )
    list_filter = ("is_active", "default_cn_warehouse", "lc_prefix")  # üîπ —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
    search_fields = ("name_ru", "name_kg", "address", "code_label", "lc_prefix")  # üîπ –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
    autocomplete_fields = ("default_cn_warehouse",)
    ordering = ("name_ru",)

    inlines = [UserInline]

    # –ú–æ–∂–Ω–æ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ:
    # fields = ("name_ru", "name_kg", "address", "code_label", "region_code", "branch_code", "lc_prefix",
    #           "default_cn_warehouse", "is_active", "created_at", "updated_at")
    # readonly_fields = ("created_at", "updated_at")

    def get_queryset(self, request):
        qs = super().get_queryset(request)
        return qs.annotate(_users_count=Count("users"))

    @admin.display(description="–ö–ª–∏–µ–Ω—Ç–æ–≤")
    def users_count(self, obj):
        return getattr(obj, "_users_count", obj.users.count())


@admin.register(ClientCodeCounter)
class ClientCodeCounterAdmin(admin.ModelAdmin):
    list_display = ("pickup_point", "last_number", "updated_at")
    search_fields = ("pickup_point__name_ru", "pickup_point__lc_prefix")
    readonly_fields = ("updated_at",)
    autocomplete_fields = ("pickup_point",)


class TrackingEventInline(admin.TabularInline):
    model = TrackingEvent
    extra = 0
    readonly_fields = ("timestamp",)


@admin.register(Order)
class OrderAdmin(admin.ModelAdmin):
    list_display = ("id", "tracking_number", "user", "last_status", "created_at")
    search_fields = ("tracking_number", "user__full_name", "user__phone")
    ordering = ("-created_at",)
    inlines = [TrackingEventInline]


@admin.register(TrackingEvent)
class TrackingEventAdmin(admin.ModelAdmin):
    list_display = ("id", "order", "status", "location", "timestamp")
    list_filter = ("status", "timestamp")
    search_fields = ("status", "order__tracking_number")
    ordering = ("-timestamp",)
